package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"crypto/rand"
	"fmt"
	"golearn/graphql1/graph/model"
	"math/big"
	"time"
)

// Добавление нового дела для выполнения
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// Случайный идентификатор
	id, _ := rand.Int(rand.Reader, big.NewInt(100))

	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", id),
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)

	return todo, nil
}

// Получение списка дел для выполнения
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Подписка на тикер времени
func (r *subscriptionResolver) Tick(ctx context.Context) (<-chan *model.Time, error) {
	ch := make(chan *model.Time)

	go func() {
		defer close(ch)

		for {
			// Раз в секунду
			time.Sleep(time.Second)

			// Временная метка
			currentTime := time.Now()
			t := &model.Time{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			select {
			// Подписка завершена
			case <-ctx.Done():
				return
			// Стандартное поведение
			case ch <- t:
			}
		}
	}()

	return ch, nil
}

// Получение пользователя
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{
		ID:   obj.UserID,
		Name: "user " + obj.UserID,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
