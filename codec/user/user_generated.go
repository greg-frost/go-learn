//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package user

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"sort"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF85186 = 1
	codecSelferCcRAW5186  = 255
	// ----- value types used ----
	codecSelferValueTypeArray5186     = 10
	codecSelferValueTypeMap5186       = 9
	codecSelferValueTypeString5186    = 6
	codecSelferValueTypeInt5186       = 2
	codecSelferValueTypeUint5186      = 3
	codecSelferValueTypeFloat5186     = 4
	codecSelferValueTypeNil5186       = 1
	codecSelferBitsize5186            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil5186 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct5186                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                              sort.Interface = nil
)

type codecSelfer5186 struct{}

func codecSelfer5186False() bool { return false }
func codecSelfer5186True() bool  { return true }

type codecSelfer5186stringSlice []string

func (p codecSelfer5186stringSlice) Len() int           { return len(p) }
func (p codecSelfer5186stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer5186stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer5186uint64Slice []uint64

func (p codecSelfer5186uint64Slice) Len() int           { return len(p) }
func (p codecSelfer5186uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer5186uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer5186int64Slice []int64

func (p codecSelfer5186int64Slice) Len() int           { return len(p) }
func (p codecSelfer5186int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer5186int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer5186float64Slice []float64

func (p codecSelfer5186float64Slice) Len() int           { return len(p) }
func (p codecSelfer5186float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer5186float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 28 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 28, need " + ver + ". Re-generate file: " + file))
	}
}

func (User) codecSelferViaCodecgen() {}
func (x *User) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5186
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [2]bool{     // should field at this index be written?
			true,          // User
			x.Email != "", // Email
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayElem()
			if yyq2[1] {
				r.EncodeString(string(x.Email))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			if z.EncBasicHandle().Canonical {
				if yyq2[1] {
					z.EncWriteMapElemKey()
					if z.IsJSONHandle() {
						z.EncWr().WriteStr("\"Email\"")
					} else {
						r.EncodeString(`Email`)
					}
					z.EncWriteMapElemValue()
					r.EncodeString(string(x.Email))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"User\"")
				} else {
					r.EncodeString(`User`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Name))
			} else {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"User\"")
				} else {
					r.EncodeString(`User`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Name))
				if yyq2[1] {
					z.EncWriteMapElemKey()
					if z.IsJSONHandle() {
						z.EncWr().WriteStr("\"Email\"")
					} else {
						r.EncodeString(`Email`)
					}
					z.EncWriteMapElemValue()
					r.EncodeString(string(x.Email))
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5186
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil5186 {
		*(x) = User{}
	} else if yyct2 == codecSelferValueTypeMap5186 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray5186 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct5186)
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5186
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "User":
			x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Email":
			x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5186
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyb6 = !z.DecContainerNext(yyj6, l, yyhl6)
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj6++
	yyb6 = !z.DecContainerNext(yyj6, l, yyhl6)
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj6++
	for ; z.DecContainerNext(yyj6, l, yyhl6); yyj6++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *User) IsCodecEmpty() bool {
	return !(x.Name != "" || x.Email != "" || false)
}
