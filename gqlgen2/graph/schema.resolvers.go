package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"golearn/gqlgen2/graph/model"
	"sort"
	"time"
)

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input model.NewVideo) (*model.Video, error) {
	id := input.ID
	n := len(r.Resolver.videos)
	if n == 0 {
		r.Resolver.videos = make(map[model.Num]model.Video)
	}

	var video model.Video
	video.Name = input.Name
	video.User = &model.User{}
	video.Description = input.Description
	video.URL = input.URL
	video.CreatedAt = model.Timestamp(time.Now())
	video.Genre = input.Genre

	if id == nil {
		newId := model.Num(n + 1)
		video.ID = newId
		r.Resolver.videos[newId] = video
	} else {
		videoId := model.Num(*id)
		_, ok := r.Resolver.videos[videoId]
		if !ok {
			return nil, fmt.Errorf("видео не найдено")
		}
		video.ID = videoId
		r.Resolver.videos[videoId] = video
	}

	return &video, nil
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id model.Num) (*model.Video, error) {
	video, ok := r.Resolver.videos[id]
	if !ok {
		return nil, fmt.Errorf("видео не найдено")
	}
	return &video, nil
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context, genre *model.Genre, limit *int, offset *int) ([]*model.Video, error) {
	n := len(r.Resolver.videos)
	videos := make([]*model.Video, 0, n)
	for _, video := range r.Resolver.videos {
		video := video
		if genre != nil && (video.Genre == nil || *genre != *video.Genre) {
			continue
		}
		videos = append(videos, &video)
	}

	sort.Slice(videos, func(i, j int) bool {
		return videos[i].ID < videos[j].ID
	})

	from, to := 0, n
	if *offset >= 0 && *offset < n {
		from = *offset
	}
	if *offset+*limit >= 0 && n > *offset+*limit {
		to = *offset + *limit
	}

	return videos[from:to], nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
