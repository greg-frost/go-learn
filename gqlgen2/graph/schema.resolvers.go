package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"golearn/gqlgen2/graph/model"
)

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input model.NewVideo) (*model.Video, error) {
	id := input.ID
	n := len(r.Resolver.videos)
	if n == 0 {
		r.Resolver.videos = make(map[model.Num]model.Video)
	}

	var video model.Video
	video.Name = input.Name
	video.Description = input.Description
	video.URL = input.URL

	if id == nil {
		newId := model.Num(n + 1)
		video.ID = newId
		r.Resolver.videos[newId] = video
	} else {
		videoId := model.Num(*id)
		_, ok := r.Resolver.videos[videoId]
		if !ok {
			return nil, fmt.Errorf("видео не найдено")
		}
		r.Resolver.videos[videoId] = video
	}

	return &video, nil
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id model.Num) (*model.Video, error) {
	video, ok := r.Resolver.videos[id]
	if !ok {
		return nil, fmt.Errorf("видео не найдено")
	}
	return &video, nil
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context, limit *int, offset *int) ([]*model.Video, error) {
	videos := make([]*model.Video, len(r.Resolver.videos))
	for _, video := range r.Resolver.videos {
		videos = append(videos, &video)
	}
	return videos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
