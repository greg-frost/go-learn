// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Query struct {
}

type User struct {
	ID    int    `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type Genre string

const (
	// Top videos
	GenreTop Genre = "TOP"
	// Educational videos
	GenreEdu Genre = "EDU"
	// Documentary videos
	GenreDoc Genre = "DOC"
	// Professional videos
	GenrePro Genre = "PRO"
	// Funny videos
	GenreFun Genre = "FUN"
)

var AllGenre = []Genre{
	GenreTop,
	GenreEdu,
	GenreDoc,
	GenrePro,
	GenreFun,
}

func (e Genre) IsValid() bool {
	switch e {
	case GenreTop, GenreEdu, GenreDoc, GenrePro, GenreFun:
		return true
	}
	return false
}

func (e Genre) String() string {
	return string(e)
}

func (e *Genre) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Genre(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Genre", str)
	}
	return nil
}

func (e Genre) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
